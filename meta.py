import numpy as np 

SENSOR_LABEL = { # http://www.ioccg.org/sensors/seawifs.html
	'CZCS'   : 'Nimbus-7',
	'TM'     : 'Landsat-5',
	'ETM'    : 'Landsat-7',
	'OLI'    : 'Landsat-8', 
	'OSMI'   : 'Arirang-1',
	'POLDER' : 'POLDER',
	'AER'    : 'AERONET',
	'OCTS'   : 'ADEOS-1',
	'SEAWIFS': 'OrbView-2',
	'VI'     : 'Suomi-NPP', 
	'MOS'    : 'MOS-1',
	'MODA'   : 'Modis-Aqua',
	'MODT'   : 'Modis-Terra',
	'MSI'    : 'Sentinel-2', 
	'OLCI'   : 'Sentinel-3',
	'MERIS'  : 'Envisat-1',
	'HICO'   : 'HICO',
	'HYPER'  : '1nm Hyperspectral',

	'test':'test'
}


duplicates = {
	'MODA' : ['MOD'],
	'MSI'  : ['S2A', 'S2B'],
}

# Add duplicate sensors
for sensor, dups in duplicates.items():
	for dup in dups:
		SENSOR_LABEL[dup] = SENSOR_LABEL[sensor]


polymer = ['OLCI', 'MOD']

# Add polymer sensors 
for sensor in polymer:
	SENSOR_LABEL[sensor+'-poly'] = SENSOR_LABEL[sensor]


def get_sensor_label(sensor):
	sensor, *ext = sensor.split('-')
	assert(sensor in SENSOR_LABEL), f'Unknown sensor: {sensor}'
	
	label = SENSOR_LABEL[sensor]
	if 'pan' in ext:
		label += '+Pan'
	return label 

# --------------------------------------------------------------

SENSOR_BANDS = {
	'CZCS'     : [     443,           520, 550,                     670                                   ],
	'TM'       : [               490,      560,                     660                                   ],
	'ETM'      : [               483,      560,                     662                                   ],
	'ETM-pan'  : [               483,      560,                     662,                               706],
	'OLI'      : [     443,      482,      561,                     655                                   ],
	'OLI-pan'  : [     443,      482,      561,                     655,                               589],
	'OSMI'     : [412, 443,      490,      555,                                              765          ],
	'POLDER'   : [     443,      490,      565,                     670,                     765          ],
	'AER'      : [412, 442,      490, 530, 551,                     668                                   ],
	'OCTS'     : [412, 443,      490, 520, 565,                     670,                     765          ],
	'SEAWIFS'  : [412, 443,      490, 510, 555,                     670,                     765          ],
	'VI'       : [410, 443,      486,      551,                     671,           745                    ], 
	'MOS'      : [408, 443,      485, 520, 570,      615, 650,      685,           750                    ],
	'MOD'      : [412, 443, 469, 488, 531, 551, 555,      645, 667, 678,           748                    ],
	'MOD-poly' : [412, 443,      488, 531, 551,                667, 678,           748                    ],
	'MSI'      : [     443,      490,      560,                     665,      705, 740,                783],
	'OLCI'     : [411, 442,      490, 510, 560,      619,      664, 673, 681, 708, 753, 761, 764, 767, 778],
	'OLCI-e'   : [411, 442,      490, 510, 560,      619,      664, 673, 681, 708, 753,                778],
	'OLCI-poly': [411, 442,      490, 510, 560,      619,      664,      681, 708, 753,                778],
	'OLCI-sat' : [411, 442,      490, 510, 560,      619,      664, 673, 681, 708, 753, 761, 764, 767,    ],

	'MERIS'    : [412, 442,      490, 510, 560,      620,      665,      681, 708, 753, 760,           778],

	'HICO'     : [409, 415, 421, 426, 432, 438, 444, 449, 455, 461, 467, 472, 478, 484, 490, 495, 501, 507, 
				  512, 518, 524, 530, 535, 541, 547, 553, 558, 564, 570, 575, 581, 587, 593, 598, 604, 610, 
				  616, 621, 627, 633, 638, 644, 650, 656, 661, 667, 673, 679, 684, 690, 696, 701, 707, 713, 
				  719, 724, 730, 736, 742, 747, 753, 759, 764, 770, 776, 782, 787],
	# 'HICO-sat' : [415, 421, 426, 432, 438, 444, 449, 455, 461, 467, 472, 478, 484, 490, 495, 501, 507, 
	# 			  512, 518, 524, 530, 535, 541, 547, 553, 558, 564, 570, 575, 581, 587, 593, 598, 604, 610, 
	# 			  616, 621, 627, 633, 638, 644, 650, 656, 661, 667, 673, 679, 684, 690, 696, 701, 707, 713], 
	'HICO-sat' : [461, 467, 472, 478, 484, 490, 495, 501, 507, 
				  512, 518, 524, 530, 535, 541, 547, 553, 558, 564, 570, 575, 581, 587, 593, 598, 604, 610, 
				  616, 621, 627, 633, 638, 644, 650, 656, 661, 667, 673, 679, 684, 690, 696, 701, 707, 713],#, 719, 724, 730, 736, 742],
	'HICO-IOP' : [409, 415, 421, 426, 432, 438, 444, 449, 455, 461, 467, 472, 478, 484, 490, 495, 501, 507, 
				  512, 518, 524, 530, 535, 541, 547, 553, 558, 564, 570, 575, 581, 587, 593, 598, 604, 610, 
				  616, 621, 627, 633, 638, 644, 650, 656, 661, 667, 673, 679, 684, 690], # absorption data becomes negative > 700nm
	'HYPER'    : list(range(400, 799)),
	'test':[1]
}

duplicates = {
	'MOD' : ['MODA', 'MODT'],
	'MSI' : ['S2A', 'S2B'],
}

# Add duplicate sensors
for sensor, dups in duplicates.items():
	for dup in dups:
		SENSOR_BANDS[dup] = SENSOR_BANDS[sensor]

def get_sensor_bands(sensor, args=None):
	assert(sensor in SENSOR_BANDS), f'Unknown sensor: {sensor}'
	if args is not None:
		if args.sat_bands and sensor in ['HICO', 'OLCI']:
			if args.product in ['aph', 'a*ph']:
				return np.array(SENSOR_BANDS[f'{sensor}-IOP'])
			return np.array(SENSOR_BANDS[f'{sensor}-sat'])
	return np.array(SENSOR_BANDS[sensor]) 	


'''
wavelengths = {
	'CZCS'     : [443, 520, 550, 670],

	'TM'       : [490, 560, 660],
	'ETM'      : [483, 560, 662],
	'ETM-pan'  : [483, 560, 662, 706],
	'OLI'      : [443, 482, 561, 655],
	'OLI-pan'  : [443, 482, 561, 655, 589],
	
	'OSMI'     : [412, 443, 490, 555, 765],

	'POLDER'   : [443, 490, 565, 670, 765],
	
	'AER'      : [412, 442, 490, 530, 551, 668],

	'OCTS'     : [412, 443, 490, 520, 565, 670, 765],

	'SEAWIFS'  : [412, 443, 490, 510, 555, 670, 765],

	'VI'       : [410, 443, 486, 551, 671, 745], 
	'VI-s'     : [410, 443, 486, 551, 671], 
	
	'MOD'      : [412, 443, 469, 488, 531, 551, 555, 645, 667, 678, 748],
	'MODA'     : [412, 443, 469, 488, 531, 551, 555, 645, 667, 678, 748],
	'MODT'     : [412, 443, 469, 488, 531, 551, 555, 645, 667, 678, 748],
	'MOD-poly' : [412, 443,      488, 531, 551,           667, 678, 748],
	
	'MOS'      : [408, 443, 485, 520, 570, 615, 650, 685, 750],

	'MSI'      : [443, 490, 560, 665, 705, 740, 783],
	'S2A'      : [443, 490, 560, 665, 705, 740, 783],
	'S2B'      : [443, 490, 560, 665, 705, 740, 783],
	'S2B-s'    : [443, 490, 560, 665, 705],

	'OLCI'     : [411, 442, 490, 510, 560, 619, 664, 673, 681, 708, 753, 761, 764, 767, 778],
	'OLCI-e'   : [411, 442, 490, 510, 560, 619, 664, 673, 681, 708, 753,                778],
	'OLCI-s'   : [411, 442, 490, 510, 560, 619, 664, 673, 681],
	'OLCI-poly': [411, 442, 490, 510, 560, 619, 664,      681, 708, 753,                778],

	'MERIS'    : [412.5, 442.5, 490, 510, 560, 620, 665, 681.25, 708.75, 753.75, 760.625, 778.75],

	'HICO'     : [409, 415, 421, 426, 432, 438, 444, 449, 455, 461, 467, 472, 478, 484, 490, 495, 501, 507, 512, 518, 524, 530, 535, 541, 547, 553, 558, 564, 570, 575, 581, 587, 593, 598, 604, 610, 616, 621, 627, 633, 638, 644, 650, 656, 661, 667, 673, 679, 684, 690, 696, 701, 707, 713, 719, 724, 730, 736, 742, 747, 753, 759, 764, 770, 776, 782, 787],
	'HYPER'    : [w for w in range(410, 731)]
}
'''